apply plugin: "groovy"
apply plugin: "spring-boot"
apply plugin: "application"
apply plugin: "idea"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'org.study'
version '1.0-SNAPSHOT'

buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
        groovyVersion = '2.4.6'
        spockVersion = "1.0-groovy-2.4"
        h2Version = "1.4.191"
    }
    repositories {
        mavenLocal()   //使用 mavenLocal() 时，gradle 会查找 Maven 配置文件${user.home}/.m2/settings.xml
        //设置url必须使用下面的方式。如果使用url 'url1','url2',只有url2会生效。
        //如果希望gradle依次使用配置的url（在前一个url找不到文件时，自动启用下一个），就必须使用下面的写法
        maven {url 'http://repo2.maven.org/maven2/'  }
        maven {url 'http://maven.oschina.net/content/groups/public/'  }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories {
    mavenLocal()   //使用 mavenLocal() 时，gradle 会查找 Maven 配置文件${user.home}/.m2/settings.xml
    //设置url必须使用下面的方式。如果使用url 'url1','url2',只有url2会生效。
    //如果希望gradle依次使用配置的url（在前一个url找不到文件时，自动启用下一个），就必须使用下面的写法
    maven {url 'http://repo2.maven.org/maven2/'  }
    maven {url 'http://maven.oschina.net/content/groups/public/'  }
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude module: "spring-boot-starter-tomcat"
        exclude module: "spring-boot-starter"
    }
    compile("org.codehaus.groovy:groovy-all:${groovyVersion}",
            "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}"
    )

    testCompile("org.spockframework:spock-core:${spockVersion}"){
        exclude module: "groovy-all"
    }
    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testRuntime "com.h2database:h2:${h2Version}"
}
